{"version":3,"sources":["App.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","status","calculateWinner","lines","length","a","b","c","Game","React","Array","fill","history","setHistory","xIsNext","setXIsNext","stepNumber","setStepNumber","moves","map","step","move","desc","key","jumpTo","current","winner","temp","slice","concat","handleClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAGMA,G,MAAS,SAACC,GACd,OACE,0BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,SAKPC,EAAQ,SAACJ,GAEf,IAAMK,EAAe,SAACC,GACtB,OACE,gBAAC,EAAD,CACAH,MAAOH,EAAMO,QAAQD,GACrBJ,QAAS,kBAAIF,EAAME,QAAQI,OAI7B,OACA,2BACI,uBAAKL,UAAU,UAAUD,EAAMQ,QAC/B,uBAAKP,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,uBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,uBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,MA6EdI,EAAkB,SAACF,GAWzB,IAVA,IAAMG,EAAQ,CACd,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEEJ,EAAI,EAAGA,EAAII,EAAMC,OAAQL,IAAK,CAAC,IAAD,cACrBI,EAAMJ,GADe,GAChCM,EADgC,KAC7BC,EAD6B,KAC1BC,EAD0B,KAEvC,GAAIP,EAAQK,IAAML,EAAQK,KAAOL,EAAQM,IAAMN,EAAQK,KAAOL,EAAQO,GACpE,OAAOP,EAAQK,GAGjB,OAAO,MAGQG,EA3FF,WAAO,IAAD,EAEWC,WAAe,CAAC,CAACT,QAASU,MAAM,GAAGC,KAAK,SAFnD,mBAEZC,EAFY,KAEHC,EAFG,OAGWJ,YAAe,GAH1B,mBAGZK,EAHY,KAGHC,EAHG,OAIiBN,WAAe,GAJhC,mBAIZO,EAJY,KAIAC,EAJA,KAgCbC,EAASN,EAAQO,KAAI,SAACC,EAAMC,GAClC,IAAMC,EAAOD,EAAI,sBAAkBA,GAAlB,mBACjB,OACE,sBAAIE,IAAKF,GACP,0BAAQ1B,QAAS,kBAXN,SAACyB,GAChBH,EAAcG,GACdL,EAAYK,EAAO,IAAO,GASCI,CAAOH,KAAQC,OAQpCG,EAAUb,EAAQI,GAClBU,EAASxB,EAAgBuB,EAAQzB,SACjCC,EAAS,SAACyB,GACd,OAAGA,EAAe,UAAN,OAAiBA,GAErB,gBAAN,OAAuBZ,EAAO,UAMlC,OAHAb,EAAOyB,GAIP,uBAAKhC,UAAU,QACX,uBAAKA,UAAU,cACb,gBAAC,EAAD,CACAM,QAAWyB,EAAQzB,QACnBL,QAAW,SAACI,IArDE,SAACA,GACrB,IAAI4B,EAAOf,EAAQgB,MAAM,EAAGZ,EAAa,GACrCS,EAAUE,EAAKA,EAAKvB,OAAS,GAC7BJ,EAAUyB,EAAQzB,QAAQ4B,QACjB1B,EAAgBuB,EAAQzB,UACxBA,EAAQD,KAIrBC,EAAQD,GAAKe,EAAO,QACpBD,EAAWc,EAAKE,OAAO,CAAC,CACtB7B,QAAQA,MAEVe,GAAYD,GACZG,EAAcU,EAAKvB,SAuCM0B,CAAY/B,IAC/BE,OAAUA,EAAOyB,MAGnB,uBAAKhC,UAAU,aACb,0BAAKwB,MCvGXa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b51fb5f8.chunk.js","sourcesContent":["import * as React from 'react';\nimport './App.css';\n\nconst Square = (props) => {      \n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nconst Board = (props) => {\n\nconst renderSquare = (i) => {\nreturn (\n  <Square \n  value={props.squares[i]} \n  onClick={()=>props.onClick(i)} />\n);\n}\n\nreturn (\n<div>\n    <div className=\"status\">{props.status}</div>\n    <div className=\"board-row\">\n      {renderSquare(0)}\n      {renderSquare(1)}\n      {renderSquare(2)}\n    </div>\n    <div className=\"board-row\">\n      {renderSquare(3)}\n      {renderSquare(4)}\n      {renderSquare(5)}\n    </div>\n    <div className=\"board-row\">\n      {renderSquare(6)}\n      {renderSquare(7)}\n      {renderSquare(8)}\n    </div>\n</div>   \n);\n}\n\nconst Game = () => {\n\nconst [history, setHistory] = React.useState([{squares: Array(9).fill(null)}]);\nconst [xIsNext, setXIsNext] = React.useState(true);\nconst [stepNumber, setStepNumber] = React.useState(0);\n\n\nconst handleClick = (i) => {\nlet temp = history.slice(0, stepNumber + 1);\nlet current = temp[temp.length - 1];\nlet squares = current.squares.slice();\nlet winner = calculateWinner(current.squares);\nif(winner || squares[i]){\n  return;\n}\n \nsquares[i] = xIsNext ? `X` : `O`;\nsetHistory(temp.concat([{\n  squares:squares\n}]));\nsetXIsNext(!xIsNext);\nsetStepNumber(temp.length);\n\n}\n\nconst jumpTo = (step) => {\nsetStepNumber(step);\nsetXIsNext((step % 2) === 0);\n}\n\n\n\nconst moves =  history.map((step, move) => {\nconst desc = move ? `Go to move #${move}` : `Go to game start`;       \nreturn(\n  <li key={move}>\n    <button onClick={() => jumpTo(move)}>{desc}</button>\n  </li>\n);\n\n}); \n\n\n\nconst current = history[stepNumber];\nconst winner = calculateWinner(current.squares);\nconst status = (winner) => {\n  if(winner) {return `Winner ${winner}`}\n  else {\n    return `Next player: ${xIsNext ? `X` : `O`}`;\n    }\n};\nstatus(winner);\n\n\nreturn (\n<div className=\"game\">\n    <div className=\"game-board\">\n      <Board \n      squares = {current.squares}\n      onClick = {(i) => {handleClick(i)}}\n      status = {status(winner)}\n      />\n    </div>\n    <div className=\"game-info\">\n      <ol>{moves}</ol>\n    </div>\n</div>\n);\n}\n\nconst calculateWinner = (squares) => {\nconst lines = [\n[0, 1, 2],\n[3, 4, 5],\n[6, 7, 8],\n[0, 3, 6],\n[1, 4, 7],\n[2, 5, 8],\n[0, 4, 8],\n[2, 4, 6],\n];\nfor (let i = 0; i < lines.length; i++) {\nconst [a, b, c] = lines[i];\nif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n  return squares[a];\n}\n}\nreturn null;  \n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}